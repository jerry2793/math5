import numpy as np

def matrix(p):
    return [
        [0]*28,
        [p] + [0]*27,
        [1-p] + [0]*27,
        [0, p] + [0] * 26,
        [0, 1-p, p] + [0] * 25, # row number 5
        [0, 0, 1-p] + [0] * 25,
        [0]*3 + [p] + [0] * 24,
        [0] * 3 + [1-p, p] + [0]*23,
        [0] * 4 + [1-p, p] + [0] * 22,
        [0] * 5 + [1-p, p] + [0] * 21, # row number 10
        [0] * 6 + [p] + [0]*21,
        [0] * 6 + [1-p, p] + [0]*20,
        [0] * 7 + [1-p, p] + [0]*19,
        [0] * 8 + [1-p, p] + [0]*18,
        [0] * 9 + [1-p] + [0]*18, # row number 15
        [0] * 10 + [p] + [0]*17,
        [0] * 10 + [1-p, p] + [0]*16,
        [0] * 11 + [1-p, p] + [0]*15,
        [0] * 12 + [1-p, p] + [0]*14,
        [0] * 13 + [1-p, p] + [0]*13, # row number 20
        [0] * 14 + [1-p] + [0]*13,
        [0] * 15 + [p] + [0]*12,
        [0] * 15 + [1-p, p] + [0]*11,
        [0] * 16 + [1-p, p] + [0]*10, 
        [0] * 17 + [1-p, p] + [0]*9, # row number 25
        [0] * 18 + [1-p, p] + [0]*8,
        [0] * 19 + [1-p, p] + [0]*7,
        [0] * 20 + [1-p] + [0]*7,
    ]

A = np.matrix(matrix(0.55))
initial_state = np.array([1] + [0] * 27)
power = 2

# raising powers for A
A = np.linalg.matrix_power(A, power)

print(np.dot(A, initial_state))